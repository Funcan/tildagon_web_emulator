import asyncio
import math
import sys
import time

def monkey_patch_time():
    if not hasattr(time, "ticks_us"):
        time.ticks_us = lambda: int(time.time_ns() / 1000)

    if not hasattr(time, "ticks_diff"):
        time.ticks_diff = lambda a, b: a - b

    if not hasattr(time, "ticks_ms"):
        time.ticks_ms = lambda: int(time.time_ns() / 1_000_000)

    if not hasattr(time, "ticks_add"):
        time.ticks_add = lambda a, b: a + b


def monkey_patch_display():
    # In Tildagon OS, display is a module with a set of functions.
    # In PyScript, we will make display a class then patch it into the modules

    class FakeDisplay:
        @staticmethod
        def gfx_init():
            print("Fake gfx_init()")

        @staticmethod
        def hexagon(ctx, x, y, dim):
            print("Not implemented: FakeDisplay: hexagon(%s, %s, %s)" % (x, y, dim))

    sys.modules["display"] = FakeDisplay

def monkey_patch_machine():
    class FakePin:
        def __init__(self, pin, mode):
            self.pin = pin
            self.mode = mode

        def value(self):
            return 0

    class FakeI2C:
        pass

    class FakeSPI:
        pass

    from types import ModuleType
    m = ModuleType("machine")
    sys.modules[m.__name__] = m

    sys.modules["machine.I2C"] = FakeI2C
    sys.modules["machine.SPI"] = FakeSPI
    sys.modules["machine.Pin"] = FakePin


def monkey_patch_tildagon():
    from types import ModuleType
    m = ModuleType("tildagon")
    sys.modules[m.__name__] = m

    class FakeEPin:
        pass

    class FakePin:
        pass


    sys.modules["tildagon.ePin"] = FakeEPin
    sys.modules["tildagon.Pin"] = FakePin

def monkey_patch_ePin():
    from types import ModuleType
    m = ModuleType("egpio")
    sys.modules[m.__name__] = m

    class FakeEPin:
        def __init__(self, pin):
            self.IN = 1
            self.OUT = 3
            self.PWM = 8
            self.pin = pin
            self.IRQ_RISING = 1
            self.IRQ_FALLING = 2

        def init(self, mode):
            pass

        def on(self):
            pass

        def off(self):
            pass

        def duty(self, duty):
            pass

        def value(self, value=None):
            return 1

        def irq(self, handler, trigger):
            pass

    sys.modules["egpio.ePin"] = FakeEPin


def monkey_patch_neopixel():
    class FakeNeoPixel:
        def __init__(self, *args, **kwargs):
            pass

        def write(self):
            # Fixme: Hook this up to the on-screen LEDs
            pass

        def fill(self, color):
            # Fixme: Hook this up to the on-screen LEDs
            pass

        def __setitem__(self, item, value):
            print("Not implemented: FakeNeoPixel: __setitem__(%s, %s)" % (item, value))

    class FakeNeoPixelModule:
        NeoPixel = FakeNeoPixel

    sys.modules["neopixel"] = FakeNeoPixelModule

async def badge():
    resolution_x = 240
    resolution_y = 240
    border = 10

    # FIXME: for now draw leds as a grey circle
    #        - we need to lay them out properly in the HTML
    #        - we need to hook them up to the code

    await start_tildagon_os()


async def start_tildagon_os():
    # Fix up differences between MicroPython and PyScript
    monkey_patch_time()
    monkey_patch_display()
    monkey_patch_machine()
    monkey_patch_tildagon()
    monkey_patch_neopixel()
    monkey_patch_ePin()

    breakpoint()
    import main
    # Everything gets started on the import above

async def main():
    _ = await asyncio.gather(badge())

asyncio.run(main())

